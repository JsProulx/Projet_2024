from pymycobot.mycobot import MyCobot
import time
import serial
from multiprocessing import Process, Value, Lock


#test sur le plan x,y, l'angle du tool est de 0,0,0
mc = MyCobot('/dev/ttyAMA0',1000000)
#Configuration du serial port
serial_Port = serial.Serial('/dev/ttyUSB0', 9600)



###########################################
#             Section - code              #
########################################### 
def read_serial(recep_Z,recep_Y,read_flag,lock):

    while True:
        received_string = serial_Port.readline().decode()
        if received_string:
            temps = received_string.split(',')
            if len(temps) == 2:
                lock.acquire()
                recep_Y = int(temps[0])
                lock.release()
                lock.acquire()
                recep_Z = int(temps[1])
                lock.release()
                time.sleep(0.001)
            lock.acquire()
            read_flag= True
            lock.release()

def mouvement(recep_Z,recep_Y,read_flag,lock):

    
    #Constante de la valeure de X, X indique la distance entre la base du robot et le bout
    Distance_preset_X = 140   
    
    #Valeure par defaut des angle de la "tete" du robot
    rx = -81
    ry = 53
    rz = -85
    
    #Valeure par defaut vitesse
    vitesse = 90
    
    #Constante pour les types de mouvements
    Angulaire = 0
    #lineaire = 1

    #Constantes de la resolution de l'ecran : 852x480
    dim_Y = 852
    dim_Z = 480
    
    #Calcul du ration mm/pixels
    mmpix_Y = 280/dim_Y
    mmpix_Z = 145/dim_Z

    lock.acquire()
    dep_Y = mmpix_Y*(recep_Y*2)  
    dep_Y = dep_Y - 140 
    dep_Z = mmpix_Z*(recep_Z*2)
    dep_Z = dep_Z + 185


    if dep_Y > -115 and dep_Y < 115 and dep_Z < 210 and dep_Z >= 185 or recep_Z ==0 and recep_Y == 0:
        lock.release()
        pass
    else:
        lock.release()
        if dep_Y >= 0:
            if dep_Y < 3 and dep_Y != 0:
                rx = rx-2.5 
                rz = rz-1
                mc.send_coords([Distance_preset_X,dep_Y,dep_Z,rx,ry,rz],vitesse,Angulaire)
            else :
                mc.send_coords([Distance_preset_X,dep_Y,dep_Z,rx,ry,rz],vitesse,Angulaire)
        elif dep_Y < 0:
            if dep_Y > -3 and dep_Y != 0:
                rx = rx-2.5
                rz = rz-1
                mc.send_coords([Distance_preset_X,dep_Y,dep_Z,rx,ry,rz],vitesse,Angulaire)
            else :
                mc.send_coords([Distance_preset_X,dep_Y,dep_Z,rx,ry,rz],vitesse,Angulaire)
        time.sleep(0.001) 
    time.sleep(0.001)

def main():

    lock = Lock()

    #Variables de donnees recues via le port serie
    shared_Recep_Z = Value('i',0)
    shared_Recep_Y = Value('i',0)
    shared_Read_flag = Value('i',0)
    
    process_Serial = Process(target=read_serial, args=(shared_Recep_Z,shared_Recep_Y,shared_Read_flag,lock))
    process_Mouvement = Process(target=mouvement, args=(shared_Recep_Z,shared_Recep_Y,shared_Read_flag,lock))

    process_Serial.start()
    while read_flag:
        process_Mouvement.start()
        process_Mouvement.join()
        read_flag = False


#Appel de la fonction main au démarrage du programme
if __name__ == "__main__":
    main()
